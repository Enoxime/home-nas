---
- name: Generate random api key
  shell: head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32
  register: container_api_key

- name: Delete a network, disconnecting all containers
  docker_network:
    name: "{{ item.name }}"
    state: "absent"
    force: yes
  loop: "{{ container_network }}"

- name: Tasks to do once before deploying the container(s)
  include: tasks_todo_once.yaml
  loop: "{{ container }}"

- name: Tasks to do each time before deploying the container(s)
  include: tasks_todo.yaml
  loop: "{{ container }}"
  loop_control:
    loop_var: iter_command_list

- name: Docker deployment
  docker_container:
    capabilities:   "{{ item.capabilities   | default(omit) }}"
    command:        "{{ item.command        | default(omit) }}"
    dns_servers:    "{{ item.dns_servers    | default(omit) }}"
    entrypoint:     "{{ item.entrypoint     | default(omit) }}"
    env:            "{{ item.env            | default(omit) }}"
    exposed_ports:  "{{ item.exposed_ports  | default(omit) }}"
    image:          "{{ item.image          | default(omit) }}"
    labels:         "{{ item.labels         | default(omit) }}"
    name:           "{{ item.name }}"
    networks:       "{{ item.networks       | default(omit) }}"
    ports:          "{{ item.ports          | default(omit) }}"
    privileged:     "{{ item.privileged     | default(omit) }}"
    restart:        "{{ item.restart        | default(docker_default.restart) }}"
    restart_policy: "{{ item.restart_policy | default(docker_default.restart_policy) }}"
    state:          "{{ item.state          | default(omit) }}"
    volumes:        "{{ item.volumes        | default(omit) }}"
    volumes_from:   "{{ item.volumes_from   | default(omit) }}"
  loop: "{{ container }}"

- name: Create networks
  docker_network:
    name: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
    force: "{{ item.force | default(omit) }}"
  loop: "{{ container_network }}"

- name: Add containers to networks
  docker_network:
    name: "{{ item.name }}"
    connected: "{{ item.containers }}"
    appends: yes
  loop: "{{ container_network }}"
...